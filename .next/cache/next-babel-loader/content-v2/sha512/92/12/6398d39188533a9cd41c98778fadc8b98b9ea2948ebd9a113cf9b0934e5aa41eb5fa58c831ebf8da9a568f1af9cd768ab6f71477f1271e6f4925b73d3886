{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nconst postsDirectory = path.join(process.cwd(), \"posts\");\nexport const getPostsFiles = () => {\n  //[ 'getting-started-with-nextjs.md' ]\n  return fs.readdirSync(postsDirectory);\n};\nexport const getPostData = filename => {\n  const postSlug = filename.replace(/\\.md$/, \"\"); // removes the file extension\n\n  const filePath = path.join(postsDirectory, `${postSlug}.md`);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const {\n    data,\n    content\n  } = matter(fileContent);\n\n  const postData = _objectSpread(_objectSpread({\n    slug: postSlug\n  }, data), {}, {\n    content\n  });\n\n  return postData;\n};\nexport const getAllPosts = () => {\n  const postFiles = getPostsFiles();\n  const allPosts = postFiles.map(filename => {\n    return getPostData(filename);\n  });\n  return allPosts;\n};","map":{"version":3,"sources":["/Users/ginnnnnn/Documents/max-courses/nextjs-course/next-blog/lib/posts-util.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPostsFiles","readdirSync","getPostData","filename","postSlug","replace","filePath","fileContent","readFileSync","data","content","postData","slug","getAllPosts","postFiles","allPosts","map"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AACjC;AACA,SAAOP,EAAE,CAACQ,WAAH,CAAeL,cAAf,CAAP;AACD,CAHM;AAKP,OAAO,MAAMM,WAAW,GAAIC,QAAD,IAAc;AACvC,QAAMC,QAAQ,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAjB,CADuC,CACS;;AAChD,QAAMC,QAAQ,GAAGZ,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA2B,GAAEQ,QAAS,KAAtC,CAAjB;AACA,QAAMG,WAAW,GAAGd,EAAE,CAACe,YAAH,CAAgBF,QAAhB,EAA0B,OAA1B,CAApB;AACA,QAAM;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBf,MAAM,CAACY,WAAD,CAAhC;;AACA,QAAMI,QAAQ;AACZC,IAAAA,IAAI,EAAER;AADM,KAETK,IAFS;AAGZC,IAAAA;AAHY,IAAd;;AAKA,SAAOC,QAAP;AACD,CAXM;AAYP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC/B,QAAMC,SAAS,GAAGd,aAAa,EAA/B;AAEA,QAAMe,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAeb,QAAD,IAAc;AAC3C,WAAOD,WAAW,CAACC,QAAD,CAAlB;AACD,GAFgB,CAAjB;AAGA,SAAOY,QAAP;AACD,CAPM","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\n\nconst postsDirectory = path.join(process.cwd(), \"posts\");\n\nexport const getPostsFiles = () => {\n  //[ 'getting-started-with-nextjs.md' ]\n  return fs.readdirSync(postsDirectory);\n};\n\nexport const getPostData = (filename) => {\n  const postSlug = filename.replace(/\\.md$/, \"\"); // removes the file extension\n  const filePath = path.join(postsDirectory, `${postSlug}.md`);\n  const fileContent = fs.readFileSync(filePath, \"utf-8\");\n  const { data, content } = matter(fileContent);\n  const postData = {\n    slug: postSlug,\n    ...data,\n    content,\n  };\n  return postData;\n};\nexport const getAllPosts = () => {\n  const postFiles = getPostsFiles();\n\n  const allPosts = postFiles.map((filename) => {\n    return getPostData(filename);\n  });\n  return allPosts;\n};\n"]},"metadata":{},"sourceType":"module"}